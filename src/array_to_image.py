import numpy as np
import imageio
from skimage.color import hsv2rgb

"""
EXAMPLE USE OF THE SCRIPTS BELOW.

file_path_col = r'img_col.png'
build_color_image(h, file_path_col,
                  hue_start=200, hue_end=285, hue_exp=0.5, hue_cap_pct=99.5,
                  s_clear=0.1, s_exp=0.5, s_cap_pct=99.5, s_start=0.7, s_end=0.8,
                  v_clear=0.1, v_exp=0.5, v_cap_pct=99.5, v_start=0.7, v_end=0.8,
                  a_clear=0.1, a_exp=0.5, a_cap_pct=99.5, a_start=0.0, a_end=1.0)

file_path_bw = r'img_bw.jpg'
build_bw_image(h, file_path_bw, clear=0.1, exp=0.5, cap_pct=99.5, start=0, end=0.99)
"""


def build_channel(h, clear=0.1, exp=0.5, cap_pct=99.5, start=0.0, end=0.9):
    """
    Builds an image channel.

    :param h: 2d histogram, as generated by the clifford_attractor_xyz.py files.
    :param clear: Any pixel with density below the product of clear and the mean density is set to zero.
    :param exp: Controls the contrast within the channel; high values give high contrast.
    :param cap_pct: The density is capped at this percentile. If cap_pct=99, then all pixels with density
                    above the 99th percentile are capped to the 99th percentile.
    :param start: Start (lower) value for the channel.
    :param end: End (upper) value for the channel.
    :return: A NumPy array of same dimension as h.
    """
    # Clear near-empty buckets, re-scale
    raw = np.copy(h).astype(np.float32)
    raw_mean = np.mean(h)
    raw[raw < clear * raw_mean] = 0
    raw_max = np.max(raw)
    raw = raw * (100 / raw_max)

    # Cap, soften and interpolate channel
    channel = raw ** exp
    cap = np.percentile(channel, cap_pct)
    channel[channel > cap] = cap
    multiplier = 1 / cap
    channel = start + (multiplier * (end - start)) * channel

    return channel


def build_color_image(h, file_path=None,
                      hue_start=220, hue_end=280, hue_exp=0.5, hue_cap_pct=99.5,
                      s_clear=0.1, s_exp=0.5, s_cap_pct=99.5, s_start=0.7, s_end=0.8,
                      v_clear=0.1, v_exp=0.5, v_cap_pct=99.5, v_start=0.7, v_end=0.8,
                      a_clear=0.1, a_exp=0.5, a_cap_pct=99.5, a_start=0.0, a_end=1.0):
    """
    Builds a color image with the hue, saturation, value and alpha channels as defined by the corresponding parameters.
    See build_channel for details on parameters.

    If file_path is set, then the file is saved.

    :param h: 2d density histogram, as generated by the clifford_attractor_xyz.py files.
    :param file_path: optional. String.
    :return: NumPy array of a rgba image.
    """
    hue = build_channel(h, clear=0.1, exp=hue_exp, cap_pct=hue_cap_pct, start=hue_start / 360., end=hue_end / 360.)
    sat = build_channel(h, clear=s_clear, exp=s_exp, cap_pct=s_cap_pct, start=s_start, end=s_end)
    val = build_channel(h, clear=v_clear, exp=v_exp, cap_pct=v_cap_pct, start=v_start, end=v_end)
    alp = build_channel(h, clear=a_clear, exp=a_exp, cap_pct=a_cap_pct, start=a_start, end=a_end)
    alp = alp.reshape((alp.shape[0], alp.shape[1], 1))

    rgb = hsv2rgb(np.stack([hue, sat, val], axis=-1))
    rgba = np.append(rgb, alp, axis=-1)

    if file_path:
        imageio.imwrite(file_path, rgba)
        return 'Image saved: {}'.format(file_path)

    return rgba


def build_bw_image(h, file_path=None, clear=0.1, exp=0.5, cap_pct=99.5, start=0, end=0.99):
    """
    Builds a black-and-white image of the density histogram h.

    If file_path is set, then the file is saved.

    :param h: 2d histogram, as generated by the clifford_attractor_xyz.py files.
    :param file_path: optional. String.
    :param clear: Any pixel with density below the product of clear and the mean density is set to zero.
    :param exp: Controls the contrast within the channel; high values give high contrast.
    :param cap_pct: The density is capped at this percentile. If cap_pct=99, then all pixels with density
                    above the 99th percentile are capped to the 99th percentile.
    :param start: Start (lower) value for the channel.
    :param end: End (upper) value for the channel.
    :return: A NumPy array of same dimension as h.
    """

    # Get channel
    bw_channel = build_channel(h, clear, exp, cap_pct, start, end)

    # Save image
    img = np.round(255 * (1 - bw_channel)).astype('uint8')

    if file_path:
        imageio.imwrite(file_path, img)
        return 'Image saved: {}'.format(file_path)

    return img



